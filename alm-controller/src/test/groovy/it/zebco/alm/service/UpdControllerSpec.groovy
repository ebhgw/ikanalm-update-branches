package it.zebco.alm.controller


import it.zebco.alm.model.ProjectStreamInfo
import it.zebco.alm.model.SvnItem
import it.zebco.alm.model.dao.h2.H2ProjectStreamInfoDAO
import org.junit.Rule
import org.junit.rules.TemporaryFolder
import spock.lang.Shared
import spock.lang.Specification
import org.codehaus.groovy.GroovyException

//import it.zebco.alm.svn.adapter.FakeSvnAdapter
/*
 * This Spock specification was generated by the Gradle 'init' task.
 */

class UpdControllerSpec extends Specification {

    @Rule final TemporaryFolder testDir = new TemporaryFolder(new File('src/test/temp'))
    @Shared h2dao = new H2ProjectStreamInfoDAO([dbUrl: "jdbc:h2:mem:updctrl;DB_CLOSE_DELAY=-1", dbUser: "sa", dbPassword: "", dbDriver: "org.h2.Driver"])
    // insert data (usually the database would already contain the data)
    def setupSpec() {
        println "initting db"
        h2dao.init()
    }

    def cleanupSpec() {
        println "closing db"
        h2dao.close()
    }

    UpdRepoOnProjectR02ProjectStreamController updCtrl
    String updDir
    List<File> jdbcjar = []
    def projectProperties = [:]
    def sai

    def setup () {
        projectProperties << ['svn.command.path': 'C:/Program Files/SlikSvn/bin']
        projectProperties << ['svn.commit.text': 'commit commit']
        projectProperties << ['svn.password': 'PA66TEST']
        projectProperties << ['svn.user': 'EY00018']
        projectProperties << ['alm.project.name': 'SS01OTX']
        projectProperties << ['alm.projectStream.buildPrefix': 'correttiva']
        projectProperties << ['alm.projectStream.buildSuffix': 'R01']
        projectProperties << ['release.project.name': 'release project']
        projectProperties << ['rdbms.server': 'ITSVIL']
        projectProperties << ['rdbms.driver': 'net.sourceforge.jtds.jdbc.Driver']
        projectProperties << ['rdbms.user': 'EY00018']
        projectProperties << ['rdbms.password': 'IknAlm18']
        projectProperties << ['rdbms.port': 1433]
        projectProperties << ['rdbms.dbname': 'IKALM_APP']
        projectProperties << ['source': new File('.').canonicalPath ]
        projectProperties << ['svn.commit.text': 'commit text' ]


        updDir = 'D:/Workspace/IKAN-PHASE/alm-common-3/controller/src/test/data/source/3002'
        jdbcjar << new File('D:/Workspace/IKAN-PHASE/libs/jtds-1.2.2.jar')

        updCtrl = new UpdRepoOnProjectR02ProjectStreamController() {
            @Override
            ProjectStreamInfo getProjectStreamInfo(String dburl, String dbuser, String dbpass, String dbdriver, Iterable<File> jjs) {
                dao = h2dao

                Map row = dao.queryByPrefixSuffix(this.almProject, this.buildPrefix, this.buildSuffix)
                if (!row) {
                    // null
                    println "No stream found for project $almProject prefix $buildPrefix suffix $buildSuffix"
                    throw new GroovyException("No stream found for project $almProject prefix $buildPrefix suffix $buildSuffix")
                }
                //println row
                this.props.put('svn.repository.uri', row.svn_REPOSITORYURL)
                this.props.put('svn.repository.trunk', row.svn_TRUNKDIRECTORY)
                this.props.put('svn.repository.tag', row.svn_TAGSDIRECTORY)
                new ProjectStreamInfo(row)
            }
        }
    }


    def "calling init" () {
        given:
        File callingInitDir = testDir.newFolder()
        when:
        //jdbcjar.each{ println it.path }
        updCtrl.init(projectProperties, callingInitDir.canonicalPath, jdbcjar)
        then:
        1==1
    }

    def "getProjectStreamInfo" () {
        given:
        File getProjectStreamInfoDir = testDir.newFolder()
        updCtrl.init(projectProperties, getProjectStreamInfoDir.canonicalPath, jdbcjar)
        when:
        // use overriden with dao
        ProjectStreamInfo psi = updCtrl.getProjectStreamInfo('dburl', 'dbuser', 'dbpass', 'dbdriver', jdbcjar)
        then:
        psi.almProjectName == 'SS01OTX'
        psi.buildPrefix == 'correttiva'
        psi.buildSuffix == 'R01'
    }

    def "getOwnerStream" () {
        given:
        File getOwnerStreamDir = testDir.newFolder()
        updCtrl.init(projectProperties,getOwnerStreamDir.canonicalPath, jdbcjar)
        updCtrl.dao = h2dao
        when:
        ProjectStreamInfo psi = updCtrl.getOwnerStream()
        then:
        psi.almProjectName == 'SS01OTX'
        psi.buildPrefix == 'correttiva'
        psi.buildSuffix == 'R01'
    }

    def "getOwnerStream fails" () {
        given:
        File getOriginStreamFailsDir = testDir.newFolder()
        updCtrl.init(projectProperties, getOriginStreamFailsDir.canonicalPath, jdbcjar)
        updCtrl.dao = h2dao
        updCtrl.almProject = 'No Project'
        when:
        ProjectStreamInfo psi = updCtrl.getOwnerStream()
        then:
        thrown AssertionError
    }

    def "getFiles" () {
        setup:
        File getFilesDir = testDir.newFolder()
        FileTreeBuilder bldr = new FileTreeBuilder(getFilesDir)
        bldr.dir('batch') {
            file('test1.cbl'){
                write 'This is test1'
            }
        }
        bldr.dir('cics') {
            file('test2.cbl'){
                write 'This is test2'
            }
        }
        updCtrl.init(projectProperties, getFilesDir.canonicalPath, jdbcjar)
        when:
        List<File> lf = updCtrl.getFiles()
        def res = lf.findResults{
            it.path.replaceAll('\\\\', '/')
        }.toSorted()
        then:
        res == ['batch/test1.cbl', 'cics/test2.cbl']
    }

    def "getSvnItems" () {
        given:
        File getSvnItemsDir = testDir.newFolder()
        FileTreeBuilder bldr = new FileTreeBuilder(getSvnItemsDir)
        bldr.dir('batch') {
            file('test1.cbl'){
                write 'This is test1'
            }
        }
        bldr.dir('cics') {
            file('test2.cbl'){
                write 'This is test2'
            }
        }
        updCtrl.init(projectProperties, getSvnItemsDir.canonicalPath, jdbcjar)
        updCtrl.dao = h2dao
        updCtrl.owner = updCtrl.getOwnerStream()
        updCtrl.lf = updCtrl.getFiles()
        when:
        List<SvnItem> lsi = updCtrl.getSvnItem()
        String proj0 = lsi[0].buildInfo.almProjectName
        List<String> res = lsi.findResults{
            it.assocFile.path.replaceAll('\\\\', '/')
        }.toSorted()
        then:
        lsi.size() == 2
        res[0] == 'batch/test1.cbl'
        res[1] == 'cics/test2.cbl'
        proj0 == 'SS01OTX'
    }

    def "getDirs" () {
        given:
        File getDirsDir = testDir.newFolder()
        FileTreeBuilder bldr = new FileTreeBuilder(getDirsDir)
        bldr.dir('batch') {
            file('test1.cbl'){
                write 'This is test1'
            }
        }
        bldr.dir('cics') {
            file('test2.cbl'){
                write 'This is test2'
            }
        }
        updCtrl.init(projectProperties, getDirsDir.canonicalPath, jdbcjar)
        updCtrl.dao = h2dao
        updCtrl.owner = updCtrl.getOwnerStream()
        updCtrl.lf = updCtrl.getFiles()
        updCtrl.lsi = updCtrl.getSvnItem()
        when:
        List<String> dirs = updCtrl.getDirs().toSorted()
        then:
        dirs.size() == 2
        dirs == ['batch', 'cics']
    }
/*
    def "calling update with fake SvnAdapter" () {
        given:
        updCtrl.init(projectProperties, updDir, jdbcjar)
        updCtrl.dao = h2dao
        updCtrl.sa = new FakeSvnAdapter()
        when:
        updCtrl.executeUpdateRelease()
        then:
        noExceptionThrown()
    }
    */

    /*
    def "getDirs on a single directory 3001"() {
        when:
        def res = updCtrl.getDirs().toSorted()
        then:
        res == ['batch']
    }

    def "getDirs on two directories 3002"() {
        given:

        when:
        def res = updCtrl.getDirs().toSorted()
        then:
        res == ['batch', 'cics']
    }
    */

}
