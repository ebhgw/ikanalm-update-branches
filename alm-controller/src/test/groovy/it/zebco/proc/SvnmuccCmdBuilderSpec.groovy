package it.zebco.proc

import groovy.util.logging.Slf4j
import org.junit.Rule
import org.junit.rules.TemporaryFolder
import spock.lang.Specification

/*
 * This Spock specification was generated by the Gradle 'init' task.
 */

@Slf4j
class SvnmuccCmdBuilderSpec extends Specification {
    @Rule final TemporaryFolder testDir = new TemporaryFolder(new File('src/test/temp'))

    // setup
    SvnmuccCmdBuilder muccer = new SvnmuccCmdBuilder(user: 'user', password: 'pass')
            .withRootUrl('rootUrl')

    def "test empty constructor" () {
        when:
        SvnmuccCmdBuilder muccFctry = new SvnmuccCmdBuilder()
        then:
        muccFctry.getClass().toString() == 'class it.zebco.proc.SvnmuccCmdBuilder'
    }

    def "test constructor" () {
        when:
        SvnmuccCmdBuilder muccFctry = new SvnmuccCmdBuilder(user: 'user', password: 'pass')
        then:
        muccFctry.getClass().toString() == 'class it.zebco.proc.SvnmuccCmdBuilder'
        muccFctry.user == 'user'
        muccFctry.password == 'pass'
    }

    def "withBinPath set svnmuccExe and not raise errors" () {
        given:
        SvnmuccCmdBuilder muccBldr = new SvnmuccCmdBuilder()
        expect:
        muccBldr.withBinPath(path).muccExe == exe
        where:
        path|exe
        ''|'svnmucc'
        null|'svnmucc'
        'C:/bin'|'"C:/bin/svnmucc"'
    }

    def "mkCmd with empty pars file" () {
        given: "setup empty list"
        List<String> pars = []
        when:
        String cmd = muccer.getMucc(pars, 'commit message')
        then:
        thrown AssertionError
    }

    // svnmucc commands in command line
    def "mkCmd non empty pars straight" () {
        given: "setup list"
        List<String> pars = ['put', 'files.ext', 'filer.ext']
        when:
        String res = muccer.getMucc(pars, 'commit message').join(' ')
        then:
        res == 'svnmucc -U rootUrl put files.ext filer.ext -u user -p pass --no-auth-cache -m "commit message"'
    }
    // svnmucc commands in file
    def "mkCmd non empty pars file cmd" () {
        given: "setup list"
        File tmpFile = null
        List<String> pars = []
        100.times {
            pars.addAll(['put', "files${it}.ext", "filer${it}.ext"])
        }
        when:
        String res = muccer.getMucc(pars, 'commit message').join(' ')
        def filePathMatcher = res =~ /-f (.*(temp.*\.tmp))/
        tmpFile = new File(filePathMatcher[0][1])
        then:
        res.take(21) == 'svnmucc -U rootUrl -f'
        tmpFile.text.size() == 2780
        tmpFile.text.substring(0,25) == "put\nfiles0.ext\nfiler0.ext"
    }
    // svnmucc commands in file
    def "mkCmd with svn bin dir" () {
        given: "setup list"
        SvnmuccCmdBuilder smccer1 = new SvnmuccCmdBuilder(user: 'user', password: 'pass')
                .withRootUrl('rootUrl')
                .withBinPath('C:/svnkit-1.8.8/bin')
        List<String> pars = ['put', 'files.ext', 'filer.ext']
        when:
        String res = smccer1.getMucc(pars, 'commit message').join(' ')
        then:
        res == '"C:/svnkit-1.8.8/bin/svnmucc" -U rootUrl put files.ext filer.ext -u user -p pass --no-auth-cache -m "commit message"'
    }

}
