package it.zebco.proc

import groovy.util.logging.Slf4j
import spock.lang.Specification

/*
 * This Spock specification was generated by the Gradle 'init' task.
 */

@Slf4j
class ExecuteCmdImplSpec extends Specification {

    def setup () {}

    def "execute windows command" (List<String> cmd) {
        /*
        given: 'cmd /C dir'
        List<String> cmd = []
        cmd.add("cmd")
        cmd.add("/C")
        cmd.add("dir")
        */
        when:
        int res = new CommandRunnerOnProcBuilder().execute(cmd)
        then:
        res == 0
        where:
        cmd << [["cmd", "/C", "dir"], ["java", "-version"]]
    }

    /*
    def "execute program" () {
        given: 'java -version'
        List<String> cmd = []
        cmd.add("java")
        cmd.add("-version")
        when:
        int res = new CommandRunnerOnProcBuilder().execute(cmd)
        then:
        res == 0
    }
    */

    def "execute program with working dir" () {
        given: 'java -version'
        List<String> cmd = []
        cmd.add("java")
        cmd.add("-version")
        File wd = new File(".")
        when:
        int res = new CommandRunnerOnProcBuilder().execute(cmd, wd)
        then:
        res == 0
    }

    def "execute program with environ" () {
        given: 'echo %GRADLE_HOME%'
        List<String> cmd = []
        cmd.add("cmd")
        cmd.add("/C")
        cmd.add("echo")
        cmd.add("%GRADLE_HOME")
        HashMap<String,String> environVars = new HashMap<String,String>()
        environVars.put("GRADLE_HOME", "C:/gradle")
        when:
        int res = new CommandRunnerOnProcBuilder().execute(cmd, environVars)
        then:
        res == 0
    }

    def "executeCaptureOutput program with environ" () {
        given: 'echo %GRADLE_HOME%'
        List<String> cmd = []
        cmd.add("cmd")
        cmd.add("/C")
        cmd.add("echo")
        cmd.add("%GRADLE_HOME%")
        HashMap<String,String> environVars = new HashMap<String,String>()
        environVars.put("GRADLE_HOME", "C:/gradle")
        when:
        String res = new CommandRunnerOnProcBuilder().executeCaptureOutput(cmd, environVars)
        then:
        res == "C:/gradle"
    }

    // test executes from build.gradle dir
    def "executeCaptureOutput program with wd" () {
        given: 'cmd /C dir on working dir'
        List<String> cmd = []
        cmd.add("cmd")
        cmd.add("/C")
        cmd.add("dir")
        //println "curr dir is " + new File(".").canonicalPath
        File wd = new File("src/test/data")
        when:
        String res = new CommandRunnerOnProcBuilder().executeCaptureOutput(cmd, wd)
        then:
        res.contains('source')
        res.contains('target')
    }
}
