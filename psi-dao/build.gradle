buildscript {
    dependencies {
        classpath 'com.h2database:h2:2.0.206'
    }
}

plugins {
    id 'groovy'
    id 'maven-publish'
    id 'org.unbroken-dome.test-sets' version '4.0.0'
    id "org.flywaydb.flyway" version "9.14.1"
}

group 'it.zebco.alm'
version '1.0.0'

repositories {
    mavenCentral()
    maven {
        name = 'almRepoLocal'
        url = "${LOCAL_REPO}"
    }
}

configurations {
    implementation.extendsFrom provided
    fatjarRuntime.extendsFrom runtimeOnly
}

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:3.0.13'
    implementation 'ch.qos.logback:logback-classic:1.3.5'
    implementation platform('org.testcontainers:testcontainers-bom:1.17.6')
    runtimeOnly 'net.sourceforge.jtds:jtds:1.3.1'
    // https://mvnrepository.com/artifact/org.spockframework/spock-core
    testImplementation 'org.spockframework:spock-core:2.3-groovy-3.0'
    testImplementation 'org.flywaydb:flyway-core:9.8.1'
    // https://mvnrepository.com/artifact/com.h2database/h2
    testImplementation 'com.h2database:h2:2.0.206'
    testImplementation "org.testcontainers:spock:1.17.6"
    testImplementation "org.testcontainers:mssqlserver:1.17.6"

}

//configurations.getByName('testImplementation').useSpock()
// show stdout when executing test. Other methods available
test {
    testLogging {
        showStandardStreams = true
    }
}

// Make all tests use JUnit 5, required to recognize spock tests
tasks.withType(Test) {
    useJUnitPlatform()
    environment([ENVIRONMENT:"test", ACCEPT_EULA: "Y", MSSQL_SA_PASSWORD:"mssql1Ipw"])
}

testSets {
    integrationTest
}

flyway {
    url = 'jdbc:h2:file:./build/db/h2db'
    user = 'sa'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'ProjectStreamInfo DAO',
                'Implementation-Version': version
    }
    from {
        (configurations.fatjarRuntime - configurations.provided).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } {
        exclude "**/Exercise*.*"
        exclude('**/*.save')
    }
    with jar
}

artifacts {
    archives fatJar
}

publishing {
    publications {
        alm2LocalMaven(MavenPublication) {
            artifact fatJar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            name = 'ikanRepo'
            url = "file:${LOCAL_REPO}"
        }
    }
}